{%

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_physical_plan, PhysicalPlan *plan) {
    TEMPLATE_INIT();
    int cur_key, dot_count;
    SqlKey *key;
    SqlTable *table;
    SqlColumn *column;
    SqlValue *value;
    char *key_fixed;
    SqlOptionalKeyword *keyword;
    char *table_name, *source;

    %}
;; This is a generate file; do not modify.
{{ plan->plan_name }}(cursorId) ; we could put arguments here
    {% // The whitespace here is needed for proper M formatting

    for(cur_key = 0, dot_count = 0; cur_key < plan->total_iter_keys; cur_key++) {
        // For each key, output the key start, a loop, quit, and increment
        key = plan->iterKeys[cur_key];
        if(key->value) {
            TMPL(print_dots, dot_count);
            switch(key->value->type) {
            case LP_VALUE:
                key_fixed = key->value->v.value->v.string_literal;
                %}S {% TMPL(tmpl_key, key); %}="{{ key_fixed }}"
    {%
                break;
            case LP_COLUMN_ALIAS:
                %}S {% TMPL(tmpl_key, key); %}={%
                TMPL(tmpl_print_expression, key->value, plan);
                %}
    {%
            break;
        default:
            FATAL(ERR_UNKNOWN_KEYWORD_STATE);
                break;
            }
            continue;
        } 
    %}{% TMPL(print_dots, dot_count); %}{% TMPL(tmpl_key_start, key); %}
    {% TMPL(print_dots, dot_count); %}FOR i{{ cur_key|%d }}=1:1 SET {% TMPL(tmpl_key, key) %}=$O({% TMPL(tmpl_key_advance, plan, key)
    %}) QUIT:({%
        TMPL(tmpl_key_end, key);
        keyword = get_keyword_from_keywords(plan->keywords, OPTIONAL_LIMIT);
        if(keyword != NULL) {
            UNPACK_SQL_STATEMENT(value, keyword->v, value);
            %})!(({{ value->v.string_literal }})<i{{ cur_key|%d }}{%
        }
    %})  DO
    {%
        dot_count++;
    }

    // Output the value
    TMPL(print_dots, dot_count);
    if(plan->set_operation == PP_EXCEPT_SET) {
        %}IF 1{%
    } else {
        switch(plan->action_type) {
        case PP_PROJECT:
            %}SET:1{%
            break;
        case PP_DELETE:
            %}KILL:1{%
            break;
        }
    }
    
    if(plan->where && plan->where->v.operand[0]) {
        %}&({%
        TMPL(tmpl_print_expression, plan->where->v.operand[0], plan);
        %}){%
    }
    // Ensure that all keys have a value
    for(cur_key = 0; cur_key < plan->total_iter_keys; cur_key++) {
        // For each key, output the key start, a loop, quit, and increment
        key = plan->iterKeys[cur_key];
        //%}&($D({% TMPL(tmpl_key_advance, plan, key); %})){%
    }
    // Distinct values if needed
    //  NOTE: the EXCEPT set doesn't need to check if a value exists before clearing it
    if(plan->distinct_values && plan->set_operation != PP_EXCEPT_SET) {
        %}&($D(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
        TMPL(tmpl_column_list_combine, plan->projection, plan, ",");
        %}))=0){%
    }

    /// TODO: key has overloaded meaning here to mean table; we need to
    // increment something somewhere
    if(plan->outputKey && plan->outputKey->insert) {
        %}{{ plan->outputKey->insert->v.string_literal }}{%
    } else if(plan->set_operation == PP_EXCEPT_SET) {
        %} SET v=$O(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{% TMPL(tmpl_column_list_combine, plan->projection, plan, ","); %},"")) KILL:v'="" {% TMPL(tmpl_key, plan->outputKey); buff_ptr--; %},v),^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{% TMPL(tmpl_column_list_combine, plan->projection, plan, ","); %},v){%
    } else if(plan->outputKey) {
        // This is probably super dangerous, but who cares...
        %} {%
        TMPL(tmpl_key, plan->outputKey);
        // Go back on in the buffer
        buff_ptr -= 1;
        if(plan->set_operation == PP_INTERSECT_SET) {
            // Do nothing; we're interested in the index, not the values themselves
            // Kill a non existent variable so we can logic consice
            assert(plan->action_type == PP_DELETE);
            /// TODO: rework this so this fake kill doesn't have to happen
            %},"this variable should never exist"){%
        } else if(plan->action_type == PP_DELETE) {
            %},^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
            TMPL(tmpl_column_list_combine, plan->projection, plan, ",");
            %})){%
        } else if(plan->stash_columns_in_keys) {
            %},{%
            TMPL(tmpl_column_list_combine, plan->projection, plan, ",");
            %}){%
        } else if (plan->order_by) {
            %},{%
            TMPL(tmpl_column_list_combine, plan->order_by, plan, ",");
            %}){%
        } else {
            %},$I(i{{ cur_key|%d }})){%
        }
        // Then assign value
        if(plan->action_type == PP_PROJECT) {
            %}={%
            if(plan->stash_columns_in_keys) {
                %}""{%
            } else {
                TMPL(tmpl_column_list_combine, plan->projection, plan, "_\"|\"_");
            }
        }
    } else if (plan->outputTable) {
        // We are putting the value directly into a table
        UNPACK_SQL_STATEMENT(table, plan->outputTable->table, table);
        //TMPL(tmpl_table_set, plan->outputTable);
    } else {
        assert(FALSE);
    }

    // If we are maintaing the columnwise index
    if(plan->maintain_columnwise_index && plan->set_operation != PP_EXCEPT_SET) {
        // Newline for the M code
        %}
    {%
        TMPL(print_dots, dot_count);
        if(plan->set_operation == PP_INTERSECT_SET) {
            %}KILL:1{%
        } else {
            %}SET:1{%
        }


        if(plan->where && plan->where->v.operand[0]) {
            %}&({%
            TMPL(tmpl_print_expression, plan->where->v.operand[0], plan);
            %}){%
        }
        // Distinct values if needed
        //  NOTE: the EXCEPT set doesn't need to check if a value exists before clearing it
        if(plan->distinct_values && plan->set_operation != PP_EXCEPT_SET && plan->set_operation != PP_INTERSECT_SET) {
            %}&($D(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
            TMPL(tmpl_column_list_combine, plan->projection, plan, ",");
            %}))=0){%
        }
        %} ^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{%
        TMPL(tmpl_column_list_combine, plan->projection, plan, ",");
        if(plan->set_operation != PP_INTERSECT_SET) {
            %},(i{{ cur_key|%d }}))="",tmpVar=$I(^|"{{ config->global_directory }}"|{{ config->global_names.raw_cursor }}(cursorId,"index",{% TMPL(tmpl_column_list_combine, plan->projection, plan, ","); %})){%
        } else {
            %}){%
        }
    }
    // If this is a INTERSECT set, we need to delete any keys remaining in the
    //  the index; these were in the first set, but not the second
    if(plan->set_operation == PP_INTERSECT_SET) {
        %}
    SET var="^|""{{ config->global_directory }}""|{{ config->global_names.raw_cursor }}("_cursorId_",""index"")" FOR  S var=$Q(@var),var=$Q(@var) Q:$P(var,",",2)'="""index"""  DO
    . SET index=$P($P(var,",",$LENGTH(var,",")),")",1),^index($i(dsfasf))=index
    . KILL:index'="" {%
    TMPL(tmpl_key, plan->outputKey);
    // Go back on in the buffer
    buff_ptr -= 1;
    %},index){%
    }
    if(plan->next) {
        %}
    DO {{ plan->next->plan_name }}(cursorId){%
    }
    %}
    QUIT  {%
    TEMPLATE_END();
}
%}
