{%
#include <string.h>

#include "octo_types.h"
#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_column_reference, PhysicalPlan *pplan, SqlColumnAlias *column_alias) {
    TEMPLATE_INIT();
    SqlColumn *column, *key_column;
    SqlTable *table;
    SqlValue *value;
    SqlTableAlias *table_alias;
    SqlOptionalKeyword *keyword;
    SqlKey *key;
    char *column_raw, *table_name;
    char *piece, *source;
    int i;

    // First check for EXTRACT, then GLOBAL & PIECE, and lastly assembly it ourselves
    //  based on table_alias->source
    UNPACK_SQL_STATEMENT(column, column_alias->column, column);
    UNPACK_SQL_STATEMENT(table_alias, column_alias->table_alias, table_alias);
    UNPACK_SQL_STATEMENT(table, table_alias->table, table);
    UNPACK_SQL_STATEMENT(value, table->tableName, value);
    table_name = value->v.string_literal;

    /// OPTIMIZATION: use key rather than column value when possible
    // If we already have this column in a key, use that
    for(i = 0; i < pplan->total_iter_keys; i++) {
        key = pplan->iterKeys[i];
        if(key->random_id == table_alias->unique_id) {
	    key_column = key->column;
	    // If key_column == column, we have the correct item and can carry on
	    if(columns_equal(key_column, column)) {
	        TMPL(tmpl_key, key);
		TEMPLATE_END();
	    }
	}
    }

    keyword = get_keyword(column, OPTIONAL_EXTRACT);
    if(keyword != NULL) {
        UNPACK_SQL_STATEMENT(value, keyword->v, value);
	%}{{ value->v.string_literal }}{%
	TEMPLATE_END();
    }

    keyword = get_keyword(column, OPTIONAL_PIECE);
    if(keyword != NULL) {
        UNPACK_SQL_STATEMENT(value, keyword->v, value);
	piece = value->v.string_literal;
    } else {
        // Search through the table for this column, convert that number to the piece number
	piece = "0";
    }

    keyword = get_keyword(column, OPTIONAL_SOURCE);
    if(keyword != NULL) {
        UNPACK_SQL_STATEMENT(value, keyword->v, value);
	source = value->v.string_literal;
    } else {
        UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
        UNPACK_SQL_STATEMENT(value, keyword->v, value);
	source = value->v.string_literal;
    }

    %}$P({% TMPL(tmpl_emit_source, source, table_name, table_alias->unique_id); %},"|",{{piece}}){%
    
    TEMPLATE_END();
}
%}
