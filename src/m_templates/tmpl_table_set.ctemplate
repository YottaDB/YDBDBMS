{%
#include "octo.h"
#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_table_set, PhysicalPlan *plan) {
    TEMPLATE_INIT();
    SqlTable *table;
    SqlTableAlias *output_table_alias;
    SqlColumn *key_columns[MAX_KEY_COUNT], *cur_column, *start_column;
    SqlColumnAlias *column_aliases[MAX_KEY_COUNT];
    SqlColumnAlias *key_column_aliases[MAX_KEY_COUNT];
    LogicalPlan *t;
    int max_key, column_alias_count = 0;

    //UNPACK_SQL_STATEMENT(table, plan->outputTable, table);
    output_table_alias = plan->outputTable;
    UNPACK_SQL_STATEMENT(table, output_table_alias->table, table);
    memset(key_columns, 0, sizeof(SqlColumn*)*MAX_KEY_COUNT);
    max_key = get_key_columns(table, key_columns);

    // Match table columns to the of columns in the project;
    //  grabbing keys where needed
    t = plan->projection;
    assert(t != NULL);
    do {
        //column_aliases[column_alias_count] = t->v.operand[0]->v.column_alias;
        t = t->v.operand[1];
    } while(t != NULL);

    // Scan through the key_columns finding matching columns in
    //  column_aliases; basically the same operation as
    //  emit_source, but put in the matching columns unique_id rather
    //  than this tables

    // =
    
    // Emit all columns in the table
    UNPACK_SQL_STATEMENT(start_column, table->columns, column);
    do {
        cur_column = cur_column->next;
    } while(cur_column != start_column);
    
    TEMPLATE_END();
}
%}
