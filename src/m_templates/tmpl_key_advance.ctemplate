{%
#include "logical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_key_advance, PhysicalPlan *pplan, SqlKey *key) {
    TEMPLATE_INIT();
    char *key_fixed, *tableName;
    SqlKey *cur_key, *first_key;
    SqlValue *value;
    SqlTable *table;
    SqlOptionalKeyword *keyword = NULL;
    int iter_key_index = 0, keys_to_match = 0;

    // If there is no table, this is a temporary key;
    //  use cursor to store the value
    if(key->value == NULL && key->table == NULL) {
        TMPL(tmpl_temp_key_advance, key);
        TEMPLATE_END();
    }

    table = key->table;
    UNPACK_SQL_STATEMENT(value, table->tableName, value);
    tableName = value->v.reference;
        

    // We ignore the key value here, so we can check if there is data in this key in some cases
    if(table->source) {
        iter_key_index = 0;
        while(pplan->iterKeys[iter_key_index] != key
            && iter_key_index < pplan->total_iter_keys) {
            if(pplan->iterKeys[iter_key_index]->random_id == key->random_id) {
                keys_to_match++;
            }
            iter_key_index++;
        }
        keys_to_match++;
        UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
        UNPACK_SQL_STATEMENT(value, keyword->v, value);
        %}{% TMPL(tmpl_emit_source, value->v.string_literal, tableName, key->random_id, keys_to_match); %}{%
      } else {
          // Check to see if the column has an advance keyword; if so, return it
          if(key->column)
              keyword = get_keyword(key->column, OPTIONAL_ADVANCE);
          if(keyword) {
              UNPACK_SQL_STATEMENT(value, keyword->v, value);
              key_fixed = value->v.string_literal;
              %}{{ key_fixed }}{%
              TEMPLATE_END();
          }
          // Construct the ADVANCE
          %}^{{ tableName }}{%
          while(pplan->iterKeys[iter_key_index] != key
              && iter_key_index < pplan->total_iter_keys) {
              if(pplan->iterKeys[iter_key_index]->random_id == key->random_id) {
                  TMPL(tmpl_key, pplan->iterKeys[iter_key_index]);
                  %},{%
              }
              iter_key_index++;
          }
          TMPL(tmpl_key, key);
          %})){%
    }
    
    TEMPLATE_END();
}
%}
