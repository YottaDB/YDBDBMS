{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "logical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_key_advance, PhysicalPlan *pplan, SqlKey *key) {
	char			*tableName;
	SqlValue		*value;
	SqlTable		*table;
	SqlOptionalKeyword	*keyword = NULL;
	unsigned int		iter_key_index = 0;
	int			keys_to_match = 0, hit_key = 0;
	char			*columnName = "";

	// If there is no table, this is a temporary key;
	//  use cursor to store the value
	if ((NULL == key->fixed_to_value) && (NULL == key->table)) {
		%{}{{ config->global_names.cursor }}(cursorId,{{ PP_KEYS }},{{ key->unique_id|%d }},"","",{}%
		TMPL(tmpl_key, key);
		%{}){}%
		return;
	}

	table = key->table;
	UNPACK_SQL_STATEMENT(value, table->tableName, value);
	tableName = value->v.reference;

	// We ignore the key value here, so we can check if there is data in this key in some cases
	if (key->cross_reference_output_key) {
		UNPACK_SQL_STATEMENT(value, key->cross_reference_output_key->column->columnName, value);
		columnName = value->v.reference;
		%{}^{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"{}%
		// Output the column this cross reference is sourced from
		iter_key_index = 0;
		while ((iter_key_index < pplan->total_iter_keys)
				&& (pplan->iterKeys[iter_key_index]->unique_id != key->unique_id)) {
			iter_key_index++;
		}
		while (iter_key_index < pplan->total_iter_keys) {
			if (pplan->iterKeys[iter_key_index]->unique_id == key->unique_id)
				keys_to_match++;
			%{},{}%
			TMPL(tmpl_key, pplan->iterKeys[iter_key_index]);
			iter_key_index++;
			if (hit_key && (pplan->iterKeys[iter_key_index] != key))
				break;
			if (pplan->iterKeys[iter_key_index] == key)
				hit_key = TRUE;
		}
		%{}){}%
	} else {
		assert(NULL != table->source);
		iter_key_index = 0;
		while ((pplan->iterKeys[iter_key_index] != key) && (iter_key_index < pplan->total_iter_keys)) {
			if (pplan->iterKeys[iter_key_index]->unique_id == key->unique_id)
				keys_to_match++;
			iter_key_index++;
		}
		keys_to_match++;
		UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		TMPL(tmpl_emit_source, table, value->v.string_literal, tableName, key->unique_id, keys_to_match, EmitSourceForm_Value);
	}
	return;
}
%{}
