{%
#include "logical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_key_advance, PhysicalPlan *pplan, SqlKey *key) {
    TEMPLATE_INIT();
    char *key_fixed, *tableName;
    SqlKey *cur_key, *first_key;
    SqlValue *value;
    SqlOptionalKeyword *keyword = NULL;
    int iter_key_index = 0;

    // If there is no table, this is a temporary key;
    //  use cursor to store the value
    if(key->value == NULL && key->table == NULL) {
        TMPL(tmpl_temp_key_advance, key);
	TEMPLATE_END();
    }

    if(key->value) {
        key_fixed = key->value->v.string_literal;	
        %}{{ key_fixed }}{%
    } else {
      	// Check to see if the column has an advance keyword; if so, return it
	if(key->column)
	    keyword = get_keyword(key->column, OPTIONAL_ADVANCE);
	if(keyword) {
	    UNPACK_SQL_STATEMENT(value, keyword->v, value);
	    key_fixed = value->v.string_literal;
	    %}{{ key_fixed }}{%
	    TEMPLATE_END();
	}
        // Construct the ADVANCE
	UNPACK_SQL_STATEMENT(value, key->table->tableName, value);
	tableName = value->v.reference;
        %}$O(^{{ tableName }}({%
	while(pplan->iterKeys[iter_key_index] != key
	    && iter_key_index < pplan->total_iter_keys) {
	    if(pplan->iterKeys[iter_key_index]->random_id == key->random_id) {
	        TMPL(tmpl_key, pplan->iterKeys[iter_key_index]);
		%},{%
	    }
	    iter_key_index++;
	}
	TMPL(tmpl_key, key);
	%})){%
    }
    
    TEMPLATE_END();
}
%}
