#ifndef OCTO_H
#define OCTO_H

#include <stdio.h>

#include <libyottadb.h>

#include "errors.h"
#include "octo_types.h"

#define OCTO_SQL_MAJOR_VERSION @OCTO_SQL_MAJOR_VERSION@
#define OCTO_SQL_MINOR_VERSION @OCTO_SQL_MINOR_VERSION@


#define MAX_STR_CONST @STRING_BUFFER_LENGTH@
#define MAX_EXPRESSION_LENGTH @MAX_EXPRESSION_LENGTH@

/**
 * Returns the column containing the primary key for this table
 *
 * @param [in] table to search
 */
SqlColumn *fetch_primary_key_column(const SqlTable *table);

void emit_simple_select(char *output, const SqlTable *table, const char *column, char *source);
void emit_create_table(FILE *output, struct SqlStatement *stmt);
SqlTable *emit_select_statement(ydb_buffer_t *cursor_global,
  ydb_buffer_t *cursor_exe_global, struct SqlStatement *stmt,
  SqlTable *destination_table);
SqlTable *emit_insert_statement(ydb_buffer_t *cursor_global,
    ydb_buffer_t *cursor_exe_global, struct SqlStatement *stmt);
void cleanup_sql_statement(SqlStatement *stmt);
/**
 * Examines the table to make sure needed columns are specified, and fills out
 * any that are needed but not present.
 *
 * @returns 0 if success, 1 otherwise
 */
int create_table_defaults(SqlStatement *table_statement, SqlStatement *keywords_statement);

char *m_escape_string(const char *string);
char *m_unescape_string(const char *string);

int readline_getc(FILE *inputFile, char *buff, int size);
char *extract_expression(SqlStatement *stmt, const SqlTable *table, char *source);
SqlStatement *parse_line(const char *line);
void print_temporary_table(SqlTable *table);
int populate_data_type(SqlStatement *v, SqlValueType *type);
SqlTable *find_table(const char *table_name);
SqlColumn *find_column(char *column_name, SqlTable *table);
int qualify_column_list(SqlColumnList *select_columns, SqlJoin *tables);
int qualify_column_name(char **column_name, SqlJoin *tables);
int qualify_statement(SqlStatement *stmt, SqlJoin *tables);
int octo_init();
void print_yyloc(YYLTYPE *llocp);
void get_table_parts(SqlTable *table, char **curse, char **start, char **end,
    char **source);
SqlOptionalKeyword *get_keyword(SqlColumn *column, enum OptionalKeyword keyword);

/* Globals */
SqlTable *definedTables;
char input_buffer_combined[MAX_STR_CONST];
OctoConfig *config;

#endif
