/* Copyright (C) 2018 YottaDB, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#ifndef OCTO_H
#define OCTO_H

#include <stdio.h>

#include <libyottadb.h>

#include "errors.h"
#include "octo_types.h"
#include "config.h"

#define OCTO_SQL_MAJOR_VERSION @OCTO_SQL_MAJOR_VERSION@
#define OCTO_SQL_MINOR_VERSION @OCTO_SQL_MINOR_VERSION@


#define MAX_STR_CONST @STRING_BUFFER_LENGTH@
#define MAX_EXPRESSION_LENGTH @MAX_EXPRESSION_LENGTH@
#define MAX_KEY_COUNT @MAX_KEY_COUNT@

/**
 * Returns the column containing the primary key for this table
 *
 * @param [in] table to search
 */
SqlColumn *fetch_primary_key_column(const SqlTable *table);

void emit_simple_select(char *output, const SqlTable *table, const char *column, char *source);
int emit_column_specification(char *buffer, int buffer_size, SqlColumn *column);
void emit_create_table(FILE *output, struct SqlStatement *stmt);
SqlTable *emit_xref_table(ydb_buffer_t *cursor_global,
    ydb_buffer_t *cursor_exe_global, struct SqlStatement *stmt);
SqlTable *emit_temporary_join_table(SqlTable *table[], int tableCount);
void cleanup_sql_statement(SqlStatement *stmt);
// Recursively copies all of stmt, including making copies of strings
SqlStatement *copy_sql_statement(SqlStatement *stmt);
SqlTable *copy_sql_table(SqlTable *table);

/**
 * Examines the table to make sure needed columns are specified, and fills out
 * any that are needed but not present.
 *
 * @returns 0 if success, 1 otherwise
 */
int create_table_defaults(SqlStatement *table_statement, SqlStatement *keywords_statement);

char *m_escape_string(const char *string);
int m_escape_string2(char *buffer, int buffer_len, char *string);
char *m_unescape_string(const char *string);

int readline_getc(FILE *inputFile, char *buff, int size);
char *extract_expression(ydb_buffer_t *cursor_global,
    ydb_buffer_t *cursor_exe_global, SqlStatement *stmt,
    const SqlTable *table, char *source);
SqlStatement *parse_line(const char *line);

int populate_data_type(SqlStatement *v, SqlValueType *type);
SqlTable *find_table(const char *table_name);
SqlColumn *find_column(char *column_name, SqlTable *table);
int qualify_column_list_alias(SqlColumnListAlias *alias, SqlJoin *tables);
int qualify_column_list(SqlColumnList *select_columns, SqlJoin *tables);
SqlColumnAlias *qualify_column_name(SqlValue *column_value, SqlJoin *tables);
int qualify_statement(SqlStatement *stmt, SqlJoin *tables);
int qualify_join_conditions(SqlJoin *join, SqlJoin *tables);
void print_yyloc(YYLTYPE *llocp);
void get_table_parts(SqlTable *table, char **curse, char **start, char **end,
    char **source);
SqlOptionalKeyword *get_keyword(SqlColumn *column, enum OptionalKeyword keyword);
SqlOptionalKeyword *get_keyword_from_keywords(SqlOptionalKeyword *start_keyword, enum OptionalKeyword keyword);
int generate_cursor(char *buffer, int buffer_size, SqlTable *table);
int generate_null_check(char *buffer, int buffer_size, SqlTable *table, int max_key);
int generate_end(char *buffer, int buffer_size, SqlTable *table);
int get_key_columns(SqlTable *table, SqlColumn **key_columns);
int get_advance(char *buffer, int buffer_size, SqlColumn *column, SqlColumn **key_columns, char **key_names, SqlTable *table);
int generate_key_name(char *buffer, int buffer_size, int target_key_num, SqlTable *table, SqlColumn **key_columns);
int find_qualified_column(SqlValue *column_reference, SqlTable **table, SqlColumn **column);

void assign_table_to_columns(SqlStatement *table_statement);
SqlColumn *column_list_alias_to_columns(SqlTableAlias *table_alias);
int get_column_piece_number(SqlColumnAlias *alias, SqlTableAlias *table_alias);

/**
 * Returns TRUE if the columns are equal, FALSE otherwise
 */
int columns_equal(SqlColumn *a, SqlColumn *b);
int tables_equal(SqlTable *a, SqlTable *b);
int values_equal(SqlValue *a, SqlValue *b);

/* Optimizations */
int optimize_where(SqlStatement *stmt, SqlJoin *join);
int constant_equal_column(SqlStatement *stmt, SqlJoin *join);

/* Globals */
SqlTable *definedTables;
char input_buffer_combined[MAX_STR_CONST];

#endif
