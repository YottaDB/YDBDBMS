#################################################################
#								#
# Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "outer join with no condition specified" {
  octo <<OCTO &> output.txt
SELECT *
FROM names n1
LEFT JOIN (
  SELECT *
  FROM names
  WHERE firstName < "Zero"
) n2;
OCTO
  [[ "$(grep -c "Error parsing statement" output.txt)" == "1" ]]
}

@test "outer join with matching rows is the same as inner join" {
  octo <<OCTO &> output1.txt
SELECT *
FROM names n1
LEFT JOIN names n2
ON n1.id = n2.id;
OCTO
  octo <<OCTO &> output2.txt
SELECT *
FROM names n1
INNER JOIN names n2
ON n1.id = n2.id;
OCTO
  grep "|" output1.txt > output1_filtered.txt
  grep "|" output2.txt > output2_filtered.txt
  [[ "$(diff output1_filtered.txt output2_filtered.txt)" == "" ]]
}

@test "outer join followed by a SET operation" {
  octo <<OCTO &> output1.txt
SELECT *
FROM names n1
LEFT JOIN names n2
ON n1.id = n2.id
UNION ALL
SELECT *
FROM names n1;
OCTO
  octo <<OCTO &> output2.txt
SELECT *
FROM names n1
INNER JOIN names n2
ON n1.id = n2.id
UNION ALL
SELECT *
FROM names n1;
OCTO
  grep "|" output1.txt > output1_filtered.txt
  grep "|" output2.txt > output2_filtered.txt
  [[ "$(diff output1_filtered.txt output2_filtered.txt)" == "" ]]
}

@test "outer join with missing columns" {
  octo <<OCTO &> output.txt
SELECT *
FROM names n1
LEFT JOIN (
  SELECT *
  FROM names
  WHERE firstName < 'Zero'
) n2
ON n1.id = n2.id;
OCTO
  [[ "$(grep -c "|" output.txt)" == "6" ]]
}

@test "right outer join with matching rows is the same as inner join" {
  octo <<OCTO &> output1.txt
SELECT *
FROM names n1
RIGHT JOIN names n2
ON n1.id = n2.id;
OCTO
  octo <<OCTO &> output2.txt
SELECT *
FROM names n1
INNER JOIN names n2
ON n1.id = n2.id;
OCTO
  grep "|" output1.txt > output1_filtered.txt
  grep "|" output2.txt > output2_filtered.txt
  [[ "$(diff output1_filtered.txt output2_filtered.txt)" == "" ]]
}

@test "right outer join followed by a SET operation" {
  octo <<OCTO &> output1.txt
SELECT *
FROM names n1
RIGHT JOIN names n2
ON n1.id = n2.id
UNION ALL
SELECT *
FROM names n1;
OCTO
  octo <<OCTO &> output2.txt
SELECT *
FROM names n1
INNER JOIN names n2
ON n1.id = n2.id
UNION ALL
SELECT *
FROM names n1;
OCTO
  grep "|" output1.txt > output1_filtered.txt
  grep "|" output2.txt > output2_filtered.txt
  [[ "$(diff output1_filtered.txt output2_filtered.txt)" == "" ]]
}

@test "right outer join with missing columns" {
  octo <<OCTO &> output.txt
SELECT *
FROM  (
  SELECT *
  FROM names
  WHERE firstName < 'Zero'
) n1
RIGHT JOIN names n2
ON n1.id = n2.id;
OCTO
  [[ "$(grep -c "|" output.txt)" == "6" ]]
}

@test "full outer join with missing columns" {
  octo <<OCTO &> output.txt
SELECT *
FROM  (
  SELECT *
  FROM names
  WHERE firstName = 'Zero'
) n1
FULL OUTER JOIN (
  SELECT *
  FROM names
  WHERE firstName = 'Acid'
) n2
ON n1.id = n2.id;
OCTO
  [[ "$(grep -c "|" output.txt)" == "3" ]]
}

@test "nested select with outer join" {
  octo <<OCTO &> output.txt
SELECT * FROM (
  SELECT *
  FROM names n1
  LEFT JOIN names n2
  ON n1.id = n2.id
) WHERE firstName :: text = 'Zero';
OCTO
  # Not crashing is valid for this test
}
