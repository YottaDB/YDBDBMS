#################################################################
#								#
# Copyright (c) 2019-2020 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
}

@test "TDT01 : drop a table check that octo reports it does not exist" {
  # create a table that can be selected from
  yottadb -run %XCMD 'set ^T1(1)="2|3|4"'
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int, c int, d int);
OCTO
  octo <<OCTO 2>&1 | tee output.txt
drop table t1;
select * from t1;
OCTO
  verify_output TDT01 output.txt noinfo nodebug
}

@test "TDT02 : drop a cached table check that octo reports it does not exist" {
  # create a table that can be selected from
  yottadb -run %XCMD 'set ^T1(1)="2|3|4"'
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int, c int, d int);
OCTO
  octo <<OCTO 2>&1 | tee output.txt
select * from t1;
drop table t1;
select * from t1;
OCTO
  verify_output TDT02 output.txt noinfo nodebug
}

@test "TDT03 : OCTO439 : DROP TABLE (and CREATE TABLE) also deletes unnecessary global variables nodes from catalog" {
  echo "# Load customers DDL" > output.txt
  load_fixture customers.sql
  echo "# Invoke TDT03.sql to print ALL columns of ORDERS table" >> output.txt
  # Below query prints the names of ALL columns of the table called 'ORDERS' using the catalog.
  # This query will be invoked multiple times by the caller after various DROP TABLE and CREATE TABLE queries run
  # We expect the output of the query to not change. Before the OCTO439 code fixes, the output would increase in size
  # after every DROP TABLE or CREATE TABLE.
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  echo "# Now load customers DDL again (CREATE TABLE)" >> output.txt
  load_fixture customers.sql
  echo "# Now run query again to verify number of columns of ORDERS table stayed the same as before." >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  echo "# Now run DROP TABLE command" >> output.txt
  octo <<OCTO 2>&1 | tee -a output.txt
    drop table ORDERS;
OCTO
  echo "# Now run query again to verify number of columns of ORDERS table came down to 0." >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  echo "# And a final load of customers DDL again (CREATE TABLE)" >> output.txt
  load_fixture customers.sql
  echo "# Now run query again to verify number of columns of ORDERS table went back to its original number." >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  verify_output TDT03 output.txt noinfo nodebug
}

@test "TDT04 : OCTO90 : DROP TABLE should delete db nodes for plans that relied on the dropped table" {
	# Note this test is mostly the same as the "test_createtable/TC030" subtest.
	# Change to one might need to be done in both places.
	echo "# Load customers DDL" > output.txt
	load_fixture customers.sql
	load_fixture customers.zwr
	echo "" >> output.txt

	echo "# Stage 1 : Run 6 queries from TC030.sql that use CUSTOMERS and ORDERS tables" >> output.txt
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TC030.sql .
	octo -vv -f TC030.sql > run1.txt 2>&1
	echo '# Verify 6 _ydboctoP*.m plans have been generated' >> output.txt
	[[ $(ls -l _ydboctoP*.m | wc -l) -eq 6 ]]
	echo "# Verify ALL 6 queries created new plans" >> output.txt
	grep "execute SQL query" run1.txt >> output.txt
	mupip extract run1.ext
	echo "# Verify db nodes correctly represent CUSTOMERS and ORDERS tables and plans that rely on them" >> output.txt
	grep -w "tableplans" run1.ext | grep -vw output_columns >> output.txt
	echo "# Verify db nodes correctly represent 6 plans that are reusable (i.e. do not need to be regenerated)" >> output.txt
	grep "plan_metadata.*output_key" run1.ext >> output.txt
	echo "# Verify db nodes correctly represent cross-references" >> output.txt
	grep -E "xref_status|ydboctoxref" run1.ext >> output.txt
	echo "# Verify currently installed triggers (expect 3 triggers, 1 for CUSTOMERS, 2 for ORDERS)" >> output.txt
	mupip trigger -select < /dev/null >> output.txt
	echo "" >> output.txt

	echo "# Stage 2 : Run DROP TABLE of ORDERS" >> output.txt
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TDT04.sql .
	octo -f TDT04.sql >> output.txt 2>&1
	echo '# Verify 6 _ydboctoP*.m plans still remain' >> output.txt
	[[ $(ls -l _ydboctoP*.m | wc -l) -eq 6 ]]
	echo "# Verify db nodes of above 6 plans corresponding to ORDERS table have been deleted" >> output.txt
	mupip extract run2.ext
	grep -w "tableplans" run2.ext | grep -vw output_columns >> output.txt
	echo "# Verify db nodes correctly represent 2 plans that are reusable (i.e. do not need to be regenerated)" >> output.txt
	grep "plan_metadata.*output_key" run2.ext >> output.txt
	echo "# Verify cross-references for ORDERS table are gone and only those for CUSTOMERS table exist" >> output.txt
	grep -E "xref_status|ydboctoxref" run2.ext >> output.txt
	echo "# Verify currently installed triggers (expect 1 trigger for CUSTOMERS, 0 for ORDERS)" >> output.txt
	mupip trigger -select < /dev/null >> output.txt
	echo "" >> output.txt
	verify_output TDT04 output.txt
}

