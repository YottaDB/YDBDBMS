init_test() {
  export test_temp=$(mktemp -d @TEST_OUTPUT_DIR@/bats-test.XXXXXX)
  echo "Temporary files in: $test_temp"
  exec >  >(tee -ia $test_temp/stdout.txt)
  exec 2> >(tee -ia $test_temp/stderr.txt >&2)
  date
  cd $test_temp
  export PATH="@PROJECT_BINARY_DIR@/src:$PATH"
}

copy_test_files() {
  for f in $@; do
    mkdir -p $test_temp/$(dirname $f)
    cp @PROJECT_SOURCE_DIR@/tests/$f $test_temp/$f
  done
}

# load_fixture <fixture name, relative to tests/fixtures
load_fixture() {
  fixture_name=$1
  if [[ $fixture_name == *.zwr ]]; then
    $ydb_dist/mupip load  @PROJECT_SOURCE_DIR@/tests/fixtures/$fixture_name
  elif [[ $fixture_name == *.sql ]]; then
    octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/$fixture_name
  else
    exit 1
  fi
}

createdb() {
  source @YOTTADB_INCLUDE_DIRS@/ydb_env_set
  export ydb_routines=". @PROJECT_BINARY_DIR@ $ydb_routines"
  export ydb_ci="@PROJECT_BINARY_DIR@/calltab.ci"

  export ydb_gbldir="$test_temp/mumps.gld"
  echo "ydb_gbldir: $ydb_gbldir"
  $ydb_dist/mumps -r ^GDE <<FILE
change -r DEFAULT -key_size=1019 -record_size=32768
change -segment DEFAULT -file_name=$test_temp/mumps.dat
change -r DEFAULT -NULL_SUBSCRIPTS=true
exit
FILE
  $ydb_dist/mupip create
  echo "Populating seed data"
  load_fixture seed.sql
  load_fixture seed.zwr
  exec 1>&3
}

start_rocto() {
  rocto &> rocto.log &
  echo $! > rocto.pid
}

stop_rocto() {
  if [[ -e rocto.pid ]]; then
    $ydb_dist/mupip stop $(cat rocto.pid)
  fi
}

run_psql() {
  PGPASSWORD=ydbrocks psql "sslmode=disable host=localhost port=1337"
}
