#################################################################
#								#
# Copyright (c) 2019 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

init_test() {
  export test_temp=$(mktemp -d @TEST_OUTPUT_DIR@/bats-test.XXXXXX)
  echo "Temporary files in: $test_temp"
  exec >  >(tee -ia $test_temp/stdout.txt)
  exec 2> >(tee -ia $test_temp/stderr.txt >&2)
  cd $test_temp
  export PATH="@PROJECT_BINARY_DIR@/src:$PATH"
}

init_tls() {
	# Generate CA key and certificate
	openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -pass pass:tester -out $test_temp/CA.key
	openssl req -new -nodes -key $test_temp/CA.key -passin pass:tester -days 365 -x509 \
			-subj "/C=US/ST=PA/L=Malvern/O=Octo/CN=www.yottadb.com" -out $test_temp/CA.crt
	# Create server key and certificate request
	openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -pass pass:tester -out $test_temp/server.key
	openssl req -new -key $test_temp/server.key -passin pass:tester \
		-subj "/C=US/ST=PA/L=Malvern/O=Octo/CN=www.yottadb.com" -out $test_temp/server.csr
	# Sign certificate based on request and local CA
	openssl x509 -req -in $test_temp/server.csr -CA $test_temp/CA.crt -CAkey $test_temp/CA.key -CAcreateserial \
		-out server.crt -days 365
	# Pass private key password to environment variable
  export USER=root
  echo -n "\nRAW PASSWORD: " >> env.log
  echo tester | $ydb_dist/plugin/gtmcrypt/maskpass | cut -f 3 -d " " >> env.log
  #echo tester | $ydb_dist/plugin/gtmcrypt/maskpass | cut -d ":" -f2 | tr -d '[:space:]' >> env.log
  echo "\nPRE ydb_tls_passwd SET" >> env.log
  env >> env.log
	export ydb_tls_passwd_DEVELOPMENT=$(echo tester | $ydb_dist/plugin/gtmcrypt/maskpass | cut -f 3 -d " ")
  #export ydb_tls_passwd_DEVELOPMENT=$(echo tester | $ydb_dist/plugin/gtmcrypt/maskpass | cut -d ":" -f2 | tr -d '[:space:]')
  echo "\nPOST ydb_tls_passwd SET" >> env.log
  env >> env.log
  export ydb_crypt_config=$test_temp/.octo.conf
  if [[ $# == "0" ]]; then
    rocto_port=1337
  else
    rocto_port=$1
  fi
  cat <<OCTO &>> $test_temp/.octo.conf
rocto: {
  port: $rocto_port;
	ssl_on: true;
}

tls: {
	CAfile: "$test_temp/CA.crt";
	CApath: "$test_temp/";
	DEVELOPMENT: {
		format: "PEM";
		cert: "$test_temp/server.crt";
		key: "$test_temp/server.key";
	}
}
OCTO
}

copy_test_files() {
  for f in $@; do
    mkdir -p $test_temp/$(dirname $f)
    cp @PROJECT_SOURCE_DIR@/tests/$f $test_temp/$f
  done
}

# load_fixture <fixture name, relative to tests/fixtures
load_fixture() {
  fixture_name=$1
  if [[ $fixture_name == *.zwr ]]; then
    $ydb_dist/mupip load  @PROJECT_SOURCE_DIR@/tests/fixtures/$fixture_name
  elif [[ $fixture_name == *.sql ]]; then
    octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/$fixture_name
  else
    exit 1
  fi
}

createdb() {
  unset ydb_gbldir gtmgbldir	# needed or else ydb_env_set can issue ZGBLDIRACC error (due to it calling MUPIP DUMPFHEAD)
				# if ydb_gbldir is defined and points to a non-existent gld file.
  source @YOTTADB_INCLUDE_DIRS@/ydb_env_set
  export ydb_routines=". @PROJECT_BINARY_DIR@ $ydb_routines"
  export ydb_ci="@PROJECT_BINARY_DIR@/calltab.ci"

  export ydb_gbldir="mumps.gld"
  echo "ydb_gbldir: $ydb_gbldir"
  $ydb_dist/mumps -r ^GDE <<FILE
change -r DEFAULT -key_size=1019 -record_size=32768
change -segment DEFAULT -file_name=$test_temp/mumps.dat
change -r DEFAULT -NULL_SUBSCRIPTS=true
exit
FILE
  $ydb_dist/mupip create
  echo "Populating seed data"
  load_fixture seed.sql
  load_fixture seed.zwr
}

start_rocto() {
  echo "ROCTO START" >> env.log
  env >> env.log
  rocto -vv &> rocto.log &
  echo $! > rocto.pid
  while [[ "$(grep -c "rocto started" rocto.log)" == "0" ]]; do
    sleep .1s
  done
}

stop_rocto() {
  if [[ -e rocto.pid ]]; then
    $ydb_dist/mupip stop $(cat rocto.pid)
  fi
}

run_psql() {
  PGPASSWORD=ydbrocks psql "sslmode=disable host=localhost port=1337"
}

run_psql_ssl() {
  PGPASSWORD=ydbrocks psql "host=localhost port=1337"
}

setup_go() {
  mkdir -p "$test_temp/go/src/"
  export GOPATH="$test_temp/go"
}

run_go() {
  cp -r @PROJECT_SOURCE_DIR@/tests/go/src/$1 $GOPATH/src/$1
  go get $1
  go build $1
  $GOPATH/bin/$1
}

verify_output() {
  echo "Comparing outref/$1 $2"
  copy_test_files outref/$1.ref
  diff outref/$1.ref $2
  return
}
